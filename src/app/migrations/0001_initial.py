# Generated by Django 5.2.3 on 2025-06-11 18:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('crypto', 'Криптовалюта'),
                            ('stock', 'Акции'),
                            ('bond', 'Облигации'),
                            ('currency', 'Валюта'),
                        ],
                        max_length=32,
                    ),
                ),
                ('ticker', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'Tool',
                'verbose_name_plural': 'Tools',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                (
                    'role',
                    models.CharField(
                        choices=[('USER', 'Пользователь'), ('ADMIN', 'Админ')], default='USER', max_length=32
                    ),
                ),
                ('token_encrypted', models.TextField(unique=True)),
                ('token_hash', models.CharField(db_index=True, max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('direction', models.CharField(choices=[('BUY', 'Покупка'), ('SELL', 'Продажа')], max_length=5)),
                ('type', models.CharField(choices=[('market', 'Рыночная'), ('limit', 'Лимитная')], max_length=32)),
                ('price', models.IntegerField(default=0)),
                ('quantity', models.IntegerField()),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('NEW', 'Новая'),
                            ('EXECUTED', 'Выполнена'),
                            ('PARTIALLY_EXECUTED', 'Частично исполнена'),
                            ('CANCELLED', 'Отменена'),
                        ],
                        max_length=32,
                    ),
                ),
                ('filled', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tool')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('price', models.IntegerField()),
                ('quantity', models.IntegerField()),
                (
                    'ask',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asks', to='app.order'),
                ),
                (
                    'bid',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids', to='app.order'),
                ),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tool')),
                (
                    'buyer',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='buy_trades', to='app.user'
                    ),
                ),
                (
                    'seller',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='sell_trades', to='app.user'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Trade',
                'verbose_name_plural': 'Trades',
            },
        ),
        migrations.CreateModel(
            name='UserTool',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tool')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
            ],
            options={
                'verbose_name': 'UserTool',
                'verbose_name_plural': 'UserTools',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='tools',
            field=models.ManyToManyField(related_name='users', through='app.UserTool', to='app.tool'),
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=0)),
                (
                    'tool',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='app.tool'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='app.user'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Balance',
                'verbose_name_plural': 'Balances',
                'unique_together': {('user', 'tool')},
            },
        ),
        migrations.AddConstraint(
            model_name='usertool',
            constraint=models.UniqueConstraint(fields=('user', 'tool'), name='unique_user_tool'),
        ),
    ]
